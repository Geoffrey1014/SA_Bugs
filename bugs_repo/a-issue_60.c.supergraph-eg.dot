digraph "supergraph" {
  overlap=false;
  compound=true;
  subgraph "cluster_foo" {
style="dashed"; color="black"; label="foo";
    subgraph cluster_node_0 {
      style="solid";
      color="black";
      fillcolor="lightgrey";
      label="sn: 0 (bb: 0)";
      node_0 [shape=none,margin=0,style=filled,fillcolor=lightgrey,label=<<TABLE BORDER="0"><TR><TD ALIGN="LEFT">BEFORE (scc: 0)</TD><TD BGCOLOR="lightgrey"><TABLE BORDER="0"><TR><TD ALIGN="LEFT">EN: 1</TD></TR></TABLE></TD></TR><TR><TD>ENTRY</TD></TR>
<TR><TD ALIGN="LEFT">AFTER</TD><TD BGCOLOR="lightgrey"><TABLE BORDER="0"><TR><TD ALIGN="LEFT">EN: 2</TD></TR></TABLE></TD></TR></TABLE>>];

    }
    subgraph cluster_node_1 {
      style="solid";
      color="black";
      fillcolor="lightgrey";
      label="sn: 1 (bb: 2)";
      node_1 [shape=none,margin=0,style=filled,fillcolor=lightgrey,label=<<TABLE BORDER="0"><TR><TD ALIGN="LEFT">BEFORE (scc: 1)</TD><TD BGCOLOR="lightgrey"><TABLE BORDER="0"><TR><TD ALIGN="LEFT">EN: 3</TD></TR></TABLE></TD></TR><TR><TD ALIGN="LEFT">a_9 = size_8(D) + 2;</TD><TD BGCOLOR="lightgrey"><TABLE BORDER="0"><TR><TD ALIGN="LEFT">EN: 4</TD></TR></TABLE></TD></TR>
<TR><TD ALIGN="LEFT">b_10 = size_8(D) + 1;</TD><TD ALIGN="LEFT"></TD></TR>
<TR><TD ALIGN="LEFT">if (a_9 &gt; b_10)</TD><TD ALIGN="LEFT"></TD></TR>
<TR><TD ALIGN="LEFT">AFTER</TD><TD BGCOLOR="lightgrey"><TABLE BORDER="0"><TR><TD ALIGN="LEFT">EN: 5</TD></TR></TABLE></TD></TR></TABLE>>];

    }
    subgraph cluster_node_2 {
      style="solid";
      color="black";
      fillcolor="lightgrey";
      label="sn: 2 (bb: 3)";
      node_2 [shape=none,margin=0,style=filled,fillcolor=lightgrey,label=<<TABLE BORDER="0"><TR><TD ALIGN="LEFT">BEFORE (scc: 2)</TD><TD BGCOLOR="lightgrey"><TABLE BORDER="0"><TR><TD ALIGN="LEFT">EN: 6</TD></TR></TABLE></TD></TR><TR><TD ALIGN="LEFT">_1 = a_9 &gt; b_10;</TD><TD BGCOLOR="lightgrey"><TABLE BORDER="0"><TR><TD ALIGN="LEFT">EN: 8</TD></TR></TABLE></TD></TR>
<TR><TD ALIGN="LEFT">_2 = (int) _1;</TD><TD ALIGN="LEFT"></TD></TR>
<TR><TD ALIGN="LEFT">__analyzer_eval (_2);</TD><TD ALIGN="LEFT"></TD></TR>
<TR><TD ALIGN="LEFT">_3 = b_10 &lt; a_9;</TD><TD ALIGN="LEFT"></TD></TR>
<TR><TD ALIGN="LEFT">_4 = (int) _3;</TD><TD ALIGN="LEFT"></TD></TR>
<TR><TD ALIGN="LEFT">__analyzer_eval (_4);</TD><TD ALIGN="LEFT"></TD></TR>
<TR><TD ALIGN="LEFT">_5 = b_10 &gt; a_9;</TD><TD ALIGN="LEFT"></TD></TR>
<TR><TD ALIGN="LEFT">_6 = (int) _5;</TD><TD ALIGN="LEFT"></TD></TR>
<TR><TD ALIGN="LEFT">__analyzer_eval (_6);</TD><TD ALIGN="LEFT"></TD></TR>
<TR><TD ALIGN="LEFT">AFTER</TD><TD BGCOLOR="lightgrey"><TABLE BORDER="0"><TR><TD ALIGN="LEFT">EN: 9</TD></TR></TABLE></TD></TR></TABLE>>];

    }
    subgraph cluster_node_3 {
      style="solid";
      color="black";
      fillcolor="lightgrey";
      label="sn: 3 (bb: 4)";
      node_3 [shape=none,margin=0,style=filled,fillcolor=lightgrey,label=<<TABLE BORDER="0"><TR><TD ALIGN="LEFT">BEFORE (scc: 3)</TD><TD BGCOLOR="lightgrey"><TABLE BORDER="0"><TR><TD ALIGN="LEFT">EN: 7(BM)</TD></TR></TABLE></TD><TD BGCOLOR="lightgrey"><TABLE BORDER="0"><TR><TD ALIGN="LEFT">EN: 10(BM)</TD></TR></TABLE></TD></TR><TR><TD ALIGN="LEFT">.MEM_7 = PHI &lt;.MEM_11(D)(2), .MEM_14(3)&gt;</TD><TD ALIGN="LEFT"></TD></TR>
<TR><TD ALIGN="LEFT">return;</TD><TD BGCOLOR="lightgrey"><TABLE BORDER="0"><TR><TD ALIGN="LEFT">EN: 11</TD></TR></TABLE></TD></TR>
<TR><TD ALIGN="LEFT">AFTER</TD><TD BGCOLOR="lightgrey"><TABLE BORDER="0"><TR><TD ALIGN="LEFT">EN: 12</TD></TR></TABLE></TD></TR></TABLE>>];

    }
    subgraph cluster_node_4 {
      style="solid";
      color="black";
      fillcolor="lightgrey";
      label="sn: 4 (bb: 1)";
      node_4 [shape=none,margin=0,style=filled,fillcolor=lightgrey,label=<<TABLE BORDER="0"><TR><TD ALIGN="LEFT">BEFORE (scc: 4)</TD><TD BGCOLOR="lightgrey"><TABLE BORDER="0"><TR><TD ALIGN="LEFT">EN: 13</TD></TR></TABLE></TD></TR><TR><TD>EXIT</TD></TR>
<TR><TD ALIGN="LEFT">AFTER</TD><TD BGCOLOR="lightgrey"><TABLE BORDER="0"><TR><TD ALIGN="LEFT">EN: 14</TD></TR></TABLE></TD></TR></TABLE>>];

    }
	node_0:s -> node_4:n [style="invis",constraint=true];
  }
  node_0 -> node_1 [style="solid,bold", color=blue, weight=100, constraint=true, ltail="cluster_node_0", lhead="cluster_node_1" headlabel=" (flags FALLTHRU)"];
  node_1 -> node_2 [style="solid,bold", color=black, weight=10, constraint=true, ltail="cluster_node_1", lhead="cluster_node_2" headlabel="true (flags TRUE_VALUE)"];
  node_1 -> node_3 [style="solid,bold", color=black, weight=10, constraint=true, ltail="cluster_node_1", lhead="cluster_node_3" headlabel="false (flags FALSE_VALUE)"];
  node_2 -> node_3 [style="solid,bold", color=blue, weight=100, constraint=true, ltail="cluster_node_2", lhead="cluster_node_3" headlabel=" (flags FALLTHRU)"];
  node_3 -> node_4 [style="solid,bold", color=black, weight=10, constraint=true, ltail="cluster_node_3", lhead="cluster_node_4" headlabel=""];
}
